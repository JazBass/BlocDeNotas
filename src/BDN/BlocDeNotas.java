package BDN;

import java.awt.Color;
import java.awt.Graphics;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.awt.Font;
import java.io.File;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author JazBass
 */
public class BlocDeNotas extends javax.swing.JFrame {

    private FileInputStream Entrada;
    private FileOutputStream Salida;
    private JFileChooser Cuadro;
    private Font fuente;

    /**
     * Creates new form FicheroTexto3
     */
    public BlocDeNotas() {
        initComponents();

    }

    public void cambiarFuente(String letra, int tipo, int tamaño) {
        fuente = new Font(letra, tipo, tamaño);
        texto.setFont(fuente);
    }

    public void cambiarColor(Color color) {
        //Recibimos el color y lo aplicamos
        texto.setForeground(color);
    }

    private void close() {
        //Tomamos el valor del TextArea
        String temporal = texto.getText();
        /*Corroboramos si ya se ha escrito algo, si se ha escrito algo
        consultamos al usuario si desea cerrar el programa*/
        if (temporal.compareTo("") != 0) {
            int respuesta = JOptionPane.showConfirmDialog(null, "Si continúa se perderan los cambios realizados. \n "
                    + "¿Desdea finalizar el programa?",
                    "ATENCIÓN", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);
            //Si el usuario acepta, dejamos el texto en blanco
            if (respuesta == 0) {
                dispose();
            }
        } 
        //Si no había nada escrito cerramos sin consultar
        else {
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFile = new javax.swing.JMenu();
        jNuevo = new javax.swing.JMenuItem();
        jAbrir = new javax.swing.JMenuItem();
        jGuardar = new javax.swing.JMenuItem();
        editarFuente = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        jMenu3.setText("jMenu3");

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        texto.setColumns(20);
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        jFile.setText("File");

        jNuevo.setText("Nuevo");
        jNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNuevoActionPerformed(evt);
            }
        });
        jFile.add(jNuevo);

        jAbrir.setText("Abrir");
        jAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbrirActionPerformed(evt);
            }
        });
        jFile.add(jAbrir);

        jGuardar.setText("Guardar");
        jGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGuardarActionPerformed(evt);
            }
        });
        jFile.add(jGuardar);

        jMenuBar1.add(jFile);

        editarFuente.setText("Edit");

        jMenuItem1.setText("Fuente");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        editarFuente.add(jMenuItem1);

        jMenuItem2.setText("Color");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        editarFuente.add(jMenuItem2);

        jMenuBar1.add(editarFuente);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNuevoActionPerformed
        //Tomamos el valor del TextArea
        String temporal = texto.getText();
        /*Corroboramos si ya se ha escrito algo, si se ha escrito algo
        consultamos al usuario si desea continuar*/
        if (temporal.compareTo("") != 0) {
            int respuesta = JOptionPane.showConfirmDialog(null, "Si continúa se perderan los cambios realizados. \n "
                    + "¿Desdea continuar?",
                    "ATENCIÓN", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);
            //Si el usuario acepta, dejamos el texto en blanco
            if (respuesta == 0) {
                texto.setText("");
            }
        }
    }//GEN-LAST:event_jNuevoActionPerformed

    private void jAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAbrirActionPerformed
        //variable auxiliar en la que guardar lo que leemos
        String temporal = "";
        //Creamos un array de bytes con tamaño fijo
        byte datos[] = new byte[1];
        //creamos y mostramos el cuadro de dialogo de ficheros para indicar el 
        //nombre del fichero a abrir
        Cuadro = new JFileChooser();
        Cuadro.showOpenDialog(getContentPane());
        try {
            //Enlazamos la entrada con el fichero
            Entrada = new FileInputStream(Cuadro.getSelectedFile());
            //Leemos el contenido del fichero
            while (Entrada.read(datos) > 0) {
                temporal += new String(datos);
                datos = new byte[1];
            }
            //cerramos el enlace
            Entrada.close();
            //actualizamos el cuadro
            texto.setText(temporal);
        } catch (IOException error) {
            //en caso de error mostramos un mensaje
            Graphics g = getGraphics();
            g.drawString("Error: " + error.getMessage(), 200, 50);
        }
    }//GEN-LAST:event_jAbrirActionPerformed

    private void jGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGuardarActionPerformed
        //Si el archivo se encuentra vacío, le informamos al usuario
        if (texto.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "El archivo se encuentra vacío");
        } else {
            //pasamos el texto del cuadro a una variable
            String temporal = texto.getText();
            //Creamos un array de bytes del tamaño del texto del cuadro
            byte datos[] = new byte[temporal.length()];
            //creamos y mostramos el cuadro de dialogo de ficheros para indicar el 
            //nombre con el que guardar
            Cuadro = new JFileChooser();
            //Agregamos .txt 
            Cuadro.setSelectedFile(new File("título.txt"));
            Cuadro.showSaveDialog(getContentPane());
            try {
                //Enlazamos la salida con el fichero
                Salida = new FileOutputStream(Cuadro.getSelectedFile());
                datos = temporal.getBytes();
                //Guardamos el texto que hemos pasado al array en el fichero
                Salida.write(datos);
                //Revisar guardar
                //Cerramos el enlace
                Salida.close();
            } catch (IOException error) {
                //En caso de error mostramos un mensaje
                System.out.println("Error: " + error.getMessage());
            }
        }
    }//GEN-LAST:event_jGuardarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Llamamos la ventana para elegir la fuente
        selectFont nVentana = new selectFont();
        nVentana.setModal(true);
        nVentana.setVisible(true);
        //Si se clickeo aceptar
        if (nVentana.realizarCambios) {
            cambiarFuente(nVentana.getLetra(), nVentana.getTipo(), nVentana.getTamaño());
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Color chooser
        Color color;
        color = JColorChooser.showDialog(null, "Seleccione un Color", null);
        cambiarColor(color);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Función para consultar altes de cerrar el programa
        close();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlocDeNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editarFuente;
    private javax.swing.JMenuItem jAbrir;
    private javax.swing.JMenu jFile;
    private javax.swing.JMenuItem jGuardar;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jNuevo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables
}
